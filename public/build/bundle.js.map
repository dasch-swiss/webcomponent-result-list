{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Services/dsp-services.js","../../src/model.js","../../src/ResultList.svelte"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","/**\n * Logins to the server and returns the token.\n *\n * @param info\n * @param user\n * @returns {Promise<any>}\n */\nexport async function login(info) {\n    return fetch(`https://${info.server}/v2/authentication`,\n        {\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            }),\n            method: 'POST',\n            body: JSON.stringify({'email': info['user']['email'], 'password': info['user']['pwd']})\n        }).then((res) => {\n        // Checks if request succeeded\n        if (!res.ok) {\n            return Promise.reject(\n                new Error(`${res.status.toString()}: ${res.statusText}`)\n            )\n        }\n\n        return res.json();\n    });\n}\n\n/**\n * Requests all the lists of a project and returns it.\n *\n * @returns {Promise<any>}\n */\nexport async function getList(info) {\n    return fetch(`https://${info.server}/admin/lists?${new URLSearchParams({projectIri: 'http://rdfh.ch/projects/' + info.shortCode})}`)\n        .then((res) => {\n            // Checks if request succeeded\n            if (!res.ok) {\n                return Promise.reject(\n                    new Error(res.statusText)\n                )\n            }\n\n            return res.json();\n        });\n}\n\n/**\n * Requests the ontology of a project and returns it.\n *\n * @returns {Promise<any>}\n */\nexport async function getOntology(info) {\n    return fetch('https://' + info.server + '/v2/ontologies/allentities/' + encodeURIComponent('http://' + info.server + '/ontology/' + info.shortCode + '/' + info.ontologyIri + '/v2') + '?allLanguages=true', {\n        method: 'GET'\n    }).then((res) => {\n        // Checks if request succeeded\n        if (!res.ok) {\n            return Promise.reject(\n                new Error(res.statusText)\n            )\n        }\n\n        return res.json().then(data => data['@graph']);\n    });\n}\nexport async function searchRequest(offset, infos) {\n    switch (infos['requestType']) {\n        case \"gravsearch\":\n            return gravSearchRequest(offset, infos);\n        case \"fulltext\":\n            return fulltextRequest(offset, infos);\n        default:\n            console.log('Didnt find matching search method');\n            break;\n    }\n}\n/**\n * Requests the data with the parameter given from parent component.\n *\n * @param offset\n * @param infos\n * @returns {Promise<unknown>}\n */\nexport async function gravSearchRequest(offset, infos) {\n    return fetch(infos['url'], {\n        method: infos['method'],\n        body: infos['gravSearch'] + `\\n OFFSET ${offset}`\n    }).then((res) => {\n        if (!res.ok) {\n            return Promise.reject(\n                new Error(`${res.status.toString()}: ${res.statusText}`)\n            )\n        }\n\n        return res.json();\n    });\n}\nexport async function fulltextRequest(offset, infos) {\n    let url = infos['url'];\n    if (url.includes('?')) {\n        url += '?';\n        console.log('Reached 1.1');\n    } else {\n        url += '&';\n        console.log('Reached 1.2');\n    }\n    console.log('Reached 2');\n    url += \"offset=\" + offset.toString();\n    console.log(url);\n    return fetch(url, {\n        method: infos['method']\n    }).then((res) => {\n        if (!res.ok) {\n            return Promise.reject(\n                new Error(`${res.status.toString()}: ${res.statusText}`)\n            )\n        }\n        console.log(res);\n        return res.json();\n    });\n}\nexport async function searchRequestCount(offset, infos) {\n    switch (infos['requestType']) {\n        case \"gravsearch\":\n            return gravSearchRequestCount(offset, infos);\n        case \"fulltextsearch\":\n            return fulltextRequestCount(offset, infos);\n        default:\n            console.log('Didnt find matching search method');\n            break;\n    }\n}\n/**\n * Requests the data count with the parameter given from parent component and the offset 0.\n *\n * @returns {Promise<unknown>}\n */\nexport async function gravSearchRequestCount(infos) {\n    return fetch(infos['url'] + '/count', {\n        method: infos['method'],\n        body: infos['gravSearch']\n    }).then((res) => {\n        // Checks if request succeeded\n        if (!res.ok) {\n            return Promise.reject(\n                new Error(`${res.status.toString()}: ${res.statusText}`)\n            );\n        }\n\n        return res.json();\n    });\n}\nexport async function fulltextRequestCount(infos) {\n    return fetch(infos['url'].replace('search/', 'search/count/'), {\n        method: infos['method']\n    }).then((res) => {\n        // Checks if request succeeded\n        if (!res.ok) {\n            return Promise.reject(\n                new Error(`${res.status.toString()}: ${res.statusText}`)\n            );\n        }\n\n        return res.json();\n    });\n}\n\n/**\n * Requests the resource by the iri and returns it.\n *\n * @param iri\n * @param token\n * @param infos\n * @returns {Promise<any>}\n */\nexport async function getResByIri(iri, token, infos) {\n    // Checks if token is valid\n    if (!token) {\n        return Promise.reject(\n            new Error(\"No valid token\")\n        );\n    }\n\n    return fetch(`https://${infos.server}/v2/resources/${encodeURIComponent(iri)}`, {\n        headers: new Headers({\n            'Authorization': `Bearer ${token}`\n        })\n    }).then((res) => {\n        // Checks if request succeeded\n        if (!res.ok) {\n            return Promise.reject(\n                new Error(`${res.status.toString()}: ${res.statusText}`)\n            )\n        }\n\n        return res.json();\n    })\n}\n\n/**\n * Requests the list node by the iri and returns it.\n *\n * @param iri\n * @param token\n * @param infos\n * @returns {Promise<any>}\n */\nexport async function getListNode(iri, token, infos) {\n    // Checks if token is valid\n    if (!token) {\n        return Promise.reject(\n            new Error(\"No valid token\")\n        )\n    }\n\n    return fetch(`https://${infos.server}/v2/node/${encodeURIComponent(iri)}`, {\n        headers: new Headers({\n            'Authorization': `Bearer ${token}`\n        })\n    }).then((res) => {\n        // Checks if request succeeded\n        if (!res.ok) {\n            return Promise.reject(\n                new Error(res.statusText)\n            )\n        }\n\n        return res.json();\n    });\n}\n","export class Image {\n    constructor(id, url, x, y) {\n        this.id = id;\n        this.url = url;\n        this.x = x;\n        this.y = y;\n    }\n}\n","<svelte:options tag=\"result-list\"/>\n\n<script>\n    import {\n        login,\n        getList,\n        getOntology,\n        searchRequest,\n        searchRequestCount,\n        getResByIri,\n        getListNode\n    } from \"./Services/dsp-services\";\n    import {Image} from \"./model\";\n\n    /**\n     * Object assigned from outside the web component. Contains all the necessary details for doing the requests.\n     */\n    export let request_infos;\n\n    /**\n     * Stores the info what should be displayed. Value can be 'properties' or 'images'.\n     */\n    let display = \"\";\n\n    /**\n     * Promises objects\n     */\n\tlet promise_data, promise_amount, promise_all_results;\n\n    /**\n     * Offset for the gravsearch query. Default is set to 0.\n     * @type {number}\n     */\n    export let current_offset = 0;\n\n    /**\n     * Amount of maximum results of a gravsearch request answer.\n     * @type {number}\n     */\n    const result_per_request = 25;\n\n    /**\n     * Size of image in pixels that will be shown if display is set to 'images'.\n     * @type {number}\n     */\n    const square_size = 150;\n\n    /**\n     * Size of image in pixels that will be shown if display is set to 'properties'.\n     * @type {number}\n     */\n    const image_size = 700;\n\n    /**\n     * Token, lists and ontology of a project.\n     */\n    let token, lists, ontology;\n\n    /**\n     * Flag if the data was fetched by completing a data request.\n     * @type {boolean}\n     */\n    let search_data_fetched = false;\n\n    /**\n     * Flag to be set if display is set to 'images' and there is no images property in the resource.\n     * @type {boolean}\n     */\n    let invalid_images = false;\n\n    /**\n     * Array containing the resources that will be displayed in the template.\n     * @type {*[]}\n     */\n    let resources = [];\n\n    /**\n     * Array containing the images that will be displayed in the template.\n     * @type {*[]}\n     */\n    let images = [];\n\n    /**\n     * Observing the input variables and starting the initialization.\n     */\n\t$: request_infos && initialize();\n\n    /**\n     * Initializes function that will be triggered if the input parameter \"request_infos\" is changed.\n     * Does all the necessary requests like getting the token, list, ontology of the project and doing the gravsearch\n     * request.\n     */\n\tfunction initialize() {\n\n        if (inputIsValid()) {\n            current_offset = 0;\n            display = getDisplayInfo();\n            // Set up all requests\n            const p1 = login(request_infos);\n            const p2 = getList(request_infos).then(l => l.lists);\n            const p3 = getOntology(request_infos);\n            const p4 = searchRequest(current_offset, request_infos);\n\n            promise_data = Promise.all([p1, p2, p3, p4])\n                .then(([d1, d2, d3, d4]) => {\n                    token = d1;\n                    lists = d2;\n                    ontology = d3;\n\n                    if (display === 'images') {\n                        if (hasValidImages(d4)) {\n                            images = addImages(wrapData(d4));\n                            promise_amount = searchRequestCount(request_infos);\n                            search_data_fetched = true;\n                        } else {\n                            invalid_images = true;\n                        }\n                    } else {\n                        getData(d4);\n                        promise_amount = searchRequestCount(request_infos);\n                        search_data_fetched = true;\n                    }\n\n                    return d4;\n                });\n\n        } else {\n            console.log(\"not valid input\");\n        }\n\t}\n\n    /**\n     * Starts the gravsearch request and assigns to a promise.\n     *\n     * @param offset\n     */\n    function startSearchRequest(offset) {\n        promise_data = searchRequest(offset, request_infos)\n            .then((data) => {\n\n                if (display === 'images') {\n                    if (hasValidImages(data)) {\n                        images = addImages(wrapData(data));\n                        search_data_fetched = true;\n                    } else {\n                        invalid_images = true;\n                    }\n                } else {\n                    getData(data);\n                    search_data_fetched = true;\n                }\n\n                return data;\n            });\n    }\n\n    /**\n     * Requests the data by looping through all the resources and initializes the requests for its properties.\n     *\n     * @param data\n     * @returns {Promise<void>}\n     */\n    async function getData(data) {\n        resources = [];\n\n        for (let a of wrapData(data)) {\n            const resData = await getResByIri(a['@id'], token, request_infos);\n\n            const resource = {\n                'knora-api:arkUrl': {\n                    labels: {'en': 'ARK Url', 'de': 'ARK Url'},\n                    values: new Array(`<a href=${resData['knora-api:arkUrl']['@value']} target='_blank'>${resData['knora-api:arkUrl']['@value']}</a>`)\n                },\n                '@id': {\n                    labels: {'en': 'Resource ID', 'de': 'Resource ID'},\n                    values: new Array(a['@id'])\n                }\n            };\n\n            for (const [key, value] of Object.entries(resData)) {\n                if (key.includes(`${request_infos['ontologyIri']}:`)) {\n                    const correctedKey = key.replace('Value', '');\n                    if (Array.isArray(value)) {\n                        for (let val of value) {\n                            await saveProp(correctedKey, val, resource)\n                        }\n                    } else {\n                        await saveProp(correctedKey, value, resource);\n                    }\n                }\n            }\n\n            // Adding the still image information\n            if (resData.hasOwnProperty('knora-api:hasStillImageFileValue')) {\n                resource['knora-api:hasStillImageFileValue'] = {\n                    labels: {'en': 'Still image', 'de': 'Bild'},\n                    values: convertImageObj(resData)\n                };\n            }\n\n            resources = [...resources, resource];\n        }\n    }\n\n\n    /**\n     * Evaluates which type the property is and saves the value to the resource object.\n     *\n     * @param propName\n     * @param propValue\n     * @param resource\n     * @returns {Promise<void>}\n     */\n    async function saveProp(propName, propValue, resource) {\n\n        switch (propValue['@type']) {\n            case 'knora-api:DecimalValue':\n                // ['knora-api:decimalValueAsDecimal']['@value'] = '1.5'\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:decimalValueAsDecimal']['@value'])\n                        } else {\n                            resource[propName] = {\n                                values: [propValue['knora-api:decimalValueAsDecimal']['@value']],\n                                labels: changeLabels(onto['rdfs:label'])\n                            }\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:BooleanValue':\n                // ['knora-api:booleanValueAsBoolean'] = true\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:booleanValueAsBoolean'])\n                        } else {\n                            resource[propName] = {\n                                values: [propValue['knora-api:booleanValueAsBoolean']],\n                                labels: changeLabels(onto['rdfs:label'])\n                            }\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:ColorValue':\n                // ['knora-api:colorValueAsColor'] = '#ff3333'\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:colorValueAsColor'])\n                        } else {\n                            resource[propName] = {\n                                values: [propValue['knora-api:colorValueAsColor']],\n                                labels: changeLabels(onto['rdfs:label'])\n                            }\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:TimeValue':\n                // ['knora-api:timeValueAsTimeStamp']['@value'] = '2019-08-30T10:45:20.173572Z'\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:timeValueAsTimeStamp']['@value'])\n                        } else {\n                            resource[propName] = {\n                                values: [propValue['knora-api:timeValueAsTimeStamp']['@value']],\n                                labels: changeLabels(onto['rdfs:label'])\n                            }\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:UriValue':\n                // ['knora-api:uriValueAsUri']['@value'] = 'http://www.google.ch'\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:uriValueAsUri']['@value'])\n                        } else {\n                            resource[propName] = {\n                                values: [propValue['knora-api:uriValueAsUri']['@value']],\n                                labels: changeLabels(onto['rdfs:label'])\n                            }\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:GeomValue':\n                // TODO -> ['knora-api:geometryValueAsGeometry'] = \"{\\\"status\\\":\\\"active\\\",\\\"lineColor\\\":\\\"#ff3333\\\",\\\"lineWidth\\\":2,\\\"points\\\":[{\\\"x\\\":0.08098591549295775,\\\"y\\\":0.16741071428571427},{\\\"x\\\":0.7394366197183099,\\\"y\\\":0.7299107142857143}],\\\"type\\\":\\\"rectangle\\\",\\\"original_index\\\":0}\"\n                break;\n            case 'knora-api:GeonameValue':\n                // ['knora-api:geonameValueAsGeonameCode'] = '2661604'\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:geonameValueAsGeonameCode'])\n                        } else {\n                            resource[propName] = {\n                                values: [propValue['knora-api:geonameValueAsGeonameCode']],\n                                labels: changeLabels(onto['rdfs:label'])\n                            }\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:IntervalValue':\n                // ['knora-api:intervalValueHasStart']['@value'] = '0'\n                // ['knora-api:intervalValueHasEnd']['@value'] = '216000'\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(`${propValue['knora-api:intervalValueHasStart']['@value']}-${propValue['knora-api:intervalValueHasEnd']['@value']}`)\n                        } else {\n                            resource[propName] = {\n                                values: [`${propValue['knora-api:intervalValueHasStart']['@value']}-${propValue['knora-api:intervalValueHasEnd']['@value']}`],\n                                labels: changeLabels(onto['rdfs:label'])\n                            }\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:TextValue':\n                // Simple Text\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:valueAsString'])\n                        } else {\n                            resource[propName] = {\n                                values: new Array(propValue['knora-api:valueAsString']),\n                                labels: changeLabels(onto['rdfs:label'])\n                            }\n                        }\n                    }\n                })\n                // Rich Text\n                // TODO -> ['knora-api:textValueAsXml'] = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<text><p>test with <strong>markup</strong></p></text>\"\n                break;\n            case 'knora-api:IntValue':\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:intValueAsInt']);\n                        } else {\n                            resource[propName] = {\n                                values: [propValue['knora-api:intValueAsInt']],\n                                labels: changeLabels(onto['rdfs:label'])\n                            }\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:DateValue':\n                // In case the details will be needed\n                // ['knora-api:dateValueHasCalendar'] = 'GREGORIAN'\n                // ['knora-api:dateValueHasEndDay'] = 13;\n                // ['knora-api:dateValueHasEndEra'] =  'CE';\n                // ['knora-api:dateValueHasEndMonth'] = 5;\n                // ['knora-api:dateValueHasEndYear'] = 2018;\n                // ['knora-api:dateValueHasStartDay'] = 13;\n                // ['knora-api:dateValueHasStartEra'] = 'CE';\n                // ['knora-api:dateValueHasStartMonth'] = 5;\n                // ['knora-api:dateValueHasStartYear'] = 2018;\n\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:valueAsString']);\n                        } else {\n                            resource[propName] = {\n                                values: new Array(propValue['knora-api:valueAsString']),\n                                labels: changeLabels(onto['rdfs:label'])\n                            };\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:ListValue':\n                const listObject = await getListNode(propValue['knora-api:listValueAsListNode']['@id'], token, request_infos);\n\n                lists.forEach(list => {\n                    if (list.id === listObject['knora-api:hasRootNode']['@id']) {\n                        if (resource[listObject['knora-api:hasRootNode']['@id']]) {\n                            resource[listObject['knora-api:hasRootNode']['@id']]['values'].push(listObject['rdfs:label']);\n                        } else {\n                            resource[listObject['knora-api:hasRootNode']['@id']] = {\n                                values: new Array(listObject['rdfs:label']),\n                                labels: changeLabels(list['labels'])\n                            };\n                        }\n                    }\n                })\n                break;\n            case 'knora-api:LinkValue':\n                ontology.forEach(onto => {\n                    if (onto['@id'] === propName) {\n                        if (resource[propName]) {\n                            resource[propName]['values'].push(propValue['knora-api:linkValueHasTarget']['@id']);\n                        } else {\n                            resource[propName] = {\n                                values: new Array(propValue['knora-api:linkValueHasTarget']['@id']),\n                                labels: changeLabels(onto['rdfs:label'])\n                            };\n                        }\n                    }\n                })\n                break;\n            default:\n                break;\n        }\n\n    }\n\n    /**\n     * Create the label object with languages as keys.\n     *\n     * @param labels\n     * @returns {{}|*}\n     */\n    function changeLabels(labels) {\n        if (Array.isArray(labels)) {\n            let newLabel = {};\n            labels.forEach(label => {\n                if (label.hasOwnProperty('@language')) {\n                    newLabel[label['@language']] = label['@value'];\n                } else if (label.hasOwnProperty('language')) {\n                    newLabel[label['language']] = label['value'];\n                }\n            })\n            return newLabel\n        } else {\n            let newLabel = {};\n            if (labels.hasOwnProperty('@language')) {\n                newLabel[labels['@language']] = labels['@value'];\n            } else if (labels.hasOwnProperty('language')) {\n                newLabel[labels['language']] = labels['value'];\n            }\n            return newLabel;\n        }\n    }\n\n    /**\n     * Checks if request_infos object has the necessary properties for executing the request.\n     *\n     * @returns {boolean}\n     */\n    function inputIsValid() {\n        return request_infos.hasOwnProperty(\"ontologyIri\") &&\n            request_infos.hasOwnProperty(\"server\") &&\n            request_infos.hasOwnProperty(\"shortCode\") &&\n            request_infos.hasOwnProperty(\"method\") &&\n            request_infos.hasOwnProperty(\"url\");\n    }\n\n    /**\n     * Getting the display info from input object.\n     *\n     * @returns {*|string}\n     */\n    function getDisplayInfo() {\n        return request_infos['display'] && (request_infos['display'] === 'properties' || request_infos['display'] === 'images') ? request_infos['display'] : \"properties\";\n    }\n\n    /**\n     * Checks if the data has hasStillImageFileValue property, so the images passed to the child component and\n     * can be displayed in the end.\n     *\n     * @param data\n     * @returns {boolean}\n     */\n    function hasValidImages(data) {\n        if (data.hasOwnProperty('@graph') && Array.isArray(data['@graph'])) {\n            return data['@graph'].every(obj => obj['knora-api:hasStillImageFileValue']);\n        } else {\n            return data.hasOwnProperty('knora-api:hasStillImageFileValue');\n        }\n    }\n\n    /**\n     * Converts every element from the results into a image object and is added to an array.\n     *\n     * @param images\n     * @returns {Image[]}\n     */\n    function addImages(images) {\n        return [...images.map(image => convertImageObj(image))];\n    }\n\n    /**\n     * Converts a object from result into an image object.\n     *\n     * @param image\n     * @returns {Image}\n     */\n    function convertImageObj(image) {\n        const url = `${image['knora-api:hasStillImageFileValue']['knora-api:stillImageFileValueHasIIIFBaseUrl']['@value']}/${image['knora-api:hasStillImageFileValue']['knora-api:fileValueHasFilename']}`;\n\n        return new Image(\n            image['@id'],\n            url,\n            image['knora-api:hasStillImageFileValue']['knora-api:stillImageFileValueHasDimX'],\n            image['knora-api:hasStillImageFileValue']['knora-api:stillImageFileValueHasDimY']);\n    }\n\n    /**\n     * Builds the iiif url with square image and a custom size.\n     *\n     * @param url\n     * @param size\n     * @returns {string}\n     */\n    function getIIIfSquareURL(url, size) {\n        return `${url}/square/${size},/0/default.jpg`;\n    }\n\n    /**\n     * Builds the iiif url with full image and a custom size.\n     *\n     * @param url\n     * @param size\n     * @returns {string}\n     */\n    function getIIIfFullURL(url, size) {\n        return `${url}/full/${size},/0/default.jpg`;\n    }\n\n    /**\n     * ???\n     *\n     * @param img\n     */\n    function openImageOverlay(img) {\n        console.log('Clicked on image', getIIIfFullURL(img['url'], image_size));\n        // TODO Find a solution to show the image in full size.\n    }\n\n    /**\n     * Checks if data is an empty object.\n     *\n     * @param data\n     * @returns {boolean}\n     */\n    function isEmpty(data) {\n        return Object.keys(data).length === 0;\n    }\n\n    /**\n     * Increases the offset and starts a new request with the new offset.\n     */\n    function next() {\n        startSearchRequest(current_offset += 1);\n    }\n\n    /**\n     * Decreases the offset and starts a new request with the new offset.\n     */\n    function previous() {\n        startSearchRequest(current_offset -= 1);\n    }\n\n    /**\n     * Prevents showing previous results if current offset is 0.\n     *\n     * @returns {boolean}\n     */\n    function preventPrevious() {\n        return current_offset === 0;\n    }\n\n    /**\n     * Prevents showing next results if data does not have flag for more result.\n     *\n     * @param data\n     * @returns {boolean}\n     */\n    function preventNext(data) {\n        return !(data.hasOwnProperty('knora-api:mayHaveMoreResults') && data['knora-api:mayHaveMoreResults']);\n    }\n\n    /**\n     * Get range of the displayed results.\n     *\n     * @param data\n     */\n    function getAmountRange(data) {\n        if (data.hasOwnProperty('@graph')) {\n            return `${current_offset * result_per_request + 1}-${current_offset * result_per_request + data['@graph'].length}`;\n        } else {\n            return `${current_offset * result_per_request + 1}`;\n        }\n    }\n\n    /**\n     * Wraps the data in an array if there is one or no result.\n     *\n     * @param data\n     */\n    function wrapData(data) {\n        if (data['@graph']) {\n            return data['@graph'];\n        } else if (data['@id']) {\n            return [data];\n        } else {\n            return [];\n        }\n    }\n</script>\n\n<div class=\"container\">\n    {#await promise_data}\n        <div>...loading data</div>\n    {:then data}\n\n        {#if search_data_fetched}\n            {#if isEmpty(data)}\n                No data found!\n            {:else}\n\n                <!-- Pagination buttons -->\n                <button disabled={preventPrevious()} on:click={() => previous()}>&lt;</button>\n                <button disabled={preventNext(data)} on:click={() => next()}>&gt;</button>\n\n                <!-- Pagination range -->\n                {#await promise_amount then bla}\n                    {getAmountRange(data)} of {bla['schema:numberOfItems']}\n                {/await}\n\n                <!-- Check what resource will show -->\n                {#if display === \"images\"}\n                    <!-- Show images -->\n                    <section class=\"img-section\">\n                        {#if images.length > 0}\n                            <div class=\"images-container\" style=\"--size: {square_size}px\">\n                                {#each images as img, i}\n                                    <img on:click={() => openImageOverlay(img)}\n                                         class=\"small-image\"\n                                         src=\"{getIIIfSquareURL(img['url'], square_size)}\"\n                                         alt=\"result image number {i + 1}\">\n                                {/each}\n                            </div>\n                        {:else }\n                            <div>No Results</div>\n                        {/if}\n                    </section>\n                {:else if display === \"properties\"}\n                    <!-- Show properties -->\n                    {#each resources as resource}\n                        <section class=\"res-section\">\n                            {#if resource.hasOwnProperty('knora-api:hasStillImageFileValue')}\n                                <div></div>\n                                <div><img src=\"{getIIIfFullURL(resource['knora-api:hasStillImageFileValue']['values']['url'], square_size)}\"></div>\n                            {/if}\n\n                            {#each Object.entries(resource) as [key, value]}\n                                {#if key !== 'knora-api:hasStillImageFileValue'}\n                                    <div class=\"prop-header\">{value.labels ? value.labels['en']: 'Property'}</div>\n                                    <div>\n                                        {#each value.values as val}\n                                            <div>{@html val}</div>\n                                        {/each}\n                                    </div>\n                                {/if}\n                            {/each}\n                        </section>\n                    {/each}\n                {/if}\n\n\n            {/if}\n        {/if}\n\n        {#if invalid_images}\n            No invalid images\n        {/if}\n\n    {:catch error}\n        <div class=\"error\">\n            <div class=\"error-header\">Something went wrong</div>\n            <div class=\"error-text\">Resource data couldn't be loaded. Let's give it another shot!</div>\n            <div class=\"error-btn-container\">\n                <button on:click={() => initialize()}>Try again</button>\n            </div>\n        </div>\n    {/await}\n</div>\n\n<style>\n    .container {\n        margin-top: 1rem;\n        border: 1px solid lightgray;\n        padding: 1rem;\n    }\n\n    .res-section {\n        margin: 1rem 0;\n        padding: 1.5rem;\n        display: grid;\n        grid-template-columns: auto 1fr;\n        gap: 1rem;\n        border: 1px solid darkgray;\n        font-size: smaller;\n    }\n\n    @media (max-width: 600px) {\n        .res-section {\n            grid-template-columns: 1fr;\n            gap: 0.5rem;\n        }\n    }\n\n    .prop-header {\n        font-weight: bold;\n    }\n\n    .error {\n        text-align: center;\n    }\n\n    .error-header {\n        font-size: larger;\n        margin-top: 0.5rem;\n    }\n\n    .error-text {\n        margin: 0.5rem;\n    }\n\n    .error-btn-container > button {\n        margin: 0.5rem;\n        background-color: dodgerblue;\n        color: white;\n    }\n\n    .img-section {\n        margin: 1rem 0;\n    }\n\n    .images-container {\n        margin-top: 1rem;\n        margin-bottom: 1rem;\n        display: grid;\n        justify-content: center;\n        /*grid-template-columns: repeat(auto-fill, minmax(150px, 150px));*/\n        grid-template-columns: repeat(auto-fill, minmax(var(--size), var(--size)));\n        gap: 1rem;\n    }\n\n    .small-image {\n        opacity: 1;\n        -webkit-transition: .3s ease-in-out;\n        transition: .3s ease-in-out;\n    }\n\n    .small-image:hover {\n        opacity: .5;\n        cursor: pointer;\n    }\n</style>\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","attribute_to_object","attributes","result","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","SvelteElement","transition_in","block","local","delete","handle_promise","promise","info","token","type","index","key","resolved","child_ctx","undefined","slice","current","needs_flush","blocks","r","c","o","transition_out","m","mount","then","error","catch","hasCatch","pending","update_await_block_branch","make_dirty","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_mount","on_destroy","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","customElement","new_on_destroy","map","filter","mount_component","async","searchRequest","offset","infos","fetch","method","body","res","ok","json","reject","status","toString","statusText","gravSearchRequest","includes","console","log","fulltextRequest","searchRequestCount","gravSearchRequestCount","replace","fulltextRequestCount","getResByIri","iri","server","encodeURIComponent","headers","Headers","Authorization","HTMLElement","constructor","super","this","attachShadow","mode","connectedCallback","slotted","attributeChangedCallback","_oldValue","newValue","disconnectedCallback","$destroy","destroy_component","$on","indexOf","splice","$set","$$props","obj","$$set","keys","Image","id","x","y","preventNext","getIIIfFullURL","square_size","labels","values","hasOwnProperty","entries","important","style","setProperty","getIIIfSquareURL","changeLabels","isArray","newLabel","label","hasValidImages","every","size","wrapData","promise_data","promise_amount","lists","ontology","request_infos","display","current_offset","search_data_fetched","invalid_images","resources","images","initialize","p1","JSON","stringify","email","password","login","p2","URLSearchParams","projectIri","shortCode","getList","p3","ontologyIri","getOntology","p4","all","d1","d2","d3","d4","addImages","getData","startSearchRequest","resData","resource","en","de","correctedKey","val","saveProp","convertImageObj","propName","propValue","onto","listObject","getListNode","list","image","next","previous","img","openImageOverlay"],"mappings":"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"}